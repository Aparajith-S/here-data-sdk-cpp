/*
 * Copyright (C) 2019 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package com.here.android.olp;

import android.content.Context;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;

import java.util.ArrayList;
import java.util.List;

import com.here.android.olp.@PACKAGE_NAME@.R;

public class TesterActivity extends AppCompatActivity {
    private static Bundle createParams = null;

    private static final String[] NATIVE_LIBRARIES = {
            "@TESTER_LIB@"
    };

    public static void setParams(Bundle params) {
        createParams = params;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        setUpNative(getContext());
    }

    @Override
    protected void onDestroy() {
        tearDownNative();
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        if (id == R.id.action_start_test) {
            // empty args for now, can pass GTest args there
            runTests(this.getFilesDir().getAbsolutePath(), new String[0]);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    public Context getContext() {
        return this;
    }

    public boolean runNativeTests() {
        // default to /sdcard/out.xml if not specified
        String workingDir = "/sdcard/";
        String outArg = "--gtest_output=xml:" + workingDir + "/out.xml";

        List<String> argList = new ArrayList<String>();
        argList.add("com.here.android.olp.TesterActivity");
        argList.add(outArg);

        // parameters for tests like:
        // adb shell am start -e -DENVVAR VALUE -e --gtest_parameter value [-e extra_param --key=value] ...
        if (createParams != null) {
            for (String key : createParams.keySet()) {
                String value = "";

                Object valueObject = createParams.get(key);
                if (valueObject != null) {
                    value = valueObject.toString();
                }

                if (key.equals("filter")) {
                    argList.add("--gtest_filter=" + value);
                } else if (key.equals("output")) {
                    argList.add("--gtest_output=xml:" + value);
                } else if (key.equals("runProdTests")) {
                    argList.add("--runProdTests" );
                } else if (key.equals("extra_param")) {
                    argList.add(value);
                } else if (key.equals("run_disabled_tests")) {
                    argList.add("--gtest_also_run_disabled_tests" );
                } else if (key.equals("repeat")) {
                    argList.add("--gtest_repeat=" + value);
                } else {
                    argList.add("--"+key+"=" + value);
                }
            }
        }

        String[] args = argList.toArray(new String[argList.size()]);

        boolean success = runTests(workingDir, args);

        Log.d("TesterActivity", "Testing done, output in " + workingDir + "/out.xml");
        return success;
    }

    static {
        for (String libName : NATIVE_LIBRARIES) {
            try {
                System.loadLibrary(libName);
            } catch (Error e) {
                Log.w("TesterActivity", libName + " lib failed to load; please ignore the message if context is a static library" + e.getMessage());
            }
        }
    }

    private native boolean runTests(String appPath, String[] args);

    private native void setUpNative(Context context);

    private native void tearDownNative();
}
